# Generated by Django 5.0.4 on 2025-03-26 04:00

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


def remove_fields_if_exist(apps, schema_editor):
    # Check if the columns exist before trying to remove them
    if schema_editor.connection.vendor == 'postgresql':
        with schema_editor.connection.cursor() as cursor:
            # List of tables and columns to check
            tables_and_columns = [
                ('cortex_yen_app_contactrequest', [
                    'fabric_category_name', 'fabric_colors', 'fabric_composition',
                    'fabric_created_at', 'fabric_description', 'fabric_finish',
                    'fabric_images', 'fabric_is_hot_selling', 'fabric_item_code',
                    'fabric_title', 'fabric_updated_at', 'fabric_weight'
                ]),
                ('cortex_yen_app_fabric', [
                    'color_images', 'updated_at'
                ]),
                ('cortex_yen_app_mediauploads', [
                    'created_at', 'updated_at'
                ]),
                ('cortex_yen_app_orderitem', [
                    'aux_image1_url', 'aux_image2_url', 'aux_image3_url',
                    'color_category_color', 'color_category_name', 'fabric_category_name',
                    'fabric_composition', 'fabric_created_at', 'fabric_description',
                    'fabric_finish', 'fabric_is_hot_selling', 'fabric_title',
                    'fabric_updated_at', 'fabric_weight', 'item_code',
                    'model_image_url', 'primary_image_url'
                ])
            ]
            
            for table, columns in tables_and_columns:
                for column in columns:
                    cursor.execute(f"""
                        SELECT column_name 
                        FROM information_schema.columns 
                        WHERE table_name='{table}' 
                        AND column_name='{column}';
                    """)
                    if cursor.fetchone():
                        schema_editor.execute(f'ALTER TABLE {table} DROP COLUMN {column};')


class Migration(migrations.Migration):

    dependencies = [
        ('cortex_yen_app', '0038_contactrequest_fabric_colors_and_more'),
    ]

    operations = [
        migrations.AlterUniqueTogether(
            name='fabriccolorimage',
            unique_together=set(),
        ),
        migrations.RunPython(remove_fields_if_exist, reverse_code=migrations.RunPython.noop),
        migrations.AlterField(
            model_name='contactrequest',
            name='related_fabric',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='cortex_yen_app.fabric'),
        ),
        migrations.AlterField(
            model_name='fabric',
            name='composition',
            field=models.CharField(max_length=255),
        ),
        migrations.AlterField(
            model_name='fabric',
            name='description',
            field=models.CharField(max_length=100),
        ),
        migrations.AlterField(
            model_name='fabric',
            name='item_code',
            field=models.CharField(max_length=100, unique=True, validators=[django.core.validators.RegexValidator(code='invalid_item_code', message='Item code must contain only letters and numbers.', regex='^[a-zA-Z0-9]*$')]),
        ),
        migrations.AlterField(
            model_name='fabric',
            name='product_category',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cortex_yen_app.productcategory'),
        ),
        migrations.AlterField(
            model_name='fabric',
            name='title',
            field=models.CharField(max_length=255),
        ),
        migrations.AlterField(
            model_name='fabriccolorimage',
            name='aux_image1',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='aux_image1', to='cortex_yen_app.mediauploads'),
        ),
        migrations.AlterField(
            model_name='fabriccolorimage',
            name='aux_image2',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='aux_image2', to='cortex_yen_app.mediauploads'),
        ),
        migrations.AlterField(
            model_name='fabriccolorimage',
            name='aux_image3',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='aux_image3', to='cortex_yen_app.mediauploads'),
        ),
        migrations.AlterField(
            model_name='fabriccolorimage',
            name='color_category',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='colors', to='cortex_yen_app.fabriccolorcategory'),
        ),
        migrations.AlterField(
            model_name='fabriccolorimage',
            name='fabric',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='color_images', to='cortex_yen_app.fabric'),
        ),
        migrations.AlterField(
            model_name='fabriccolorimage',
            name='model_image',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='model_image', to='cortex_yen_app.mediauploads'),
        ),
        migrations.AlterField(
            model_name='fabriccolorimage',
            name='primary_image',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.DO_NOTHING, related_name='primary_images', to='cortex_yen_app.mediauploads'),
        ),
        migrations.AlterField(
            model_name='orderitem',
            name='fabric',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='orderitem_set', to='cortex_yen_app.fabric'),
        ),
        migrations.AlterField(
            model_name='orderitem',
            name='quantity',
            field=models.PositiveIntegerField(),
        ),
    ]
